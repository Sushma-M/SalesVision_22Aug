/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesdb.Quotes;
import com.salesdb.Reps;
import com.salesdb.Tasks;

/**
 * Service object for domain model class Reps.
 *
 * @see {@link Reps}
 */
public interface RepsService {

    /**
     * Creates a new Reps.
     *
     * @param reps The information of the created CompositeTable.
     * @return The created Reps.
     */
	Reps create(Reps reps);


	/**
	 * Finds Reps by id.
	 *
	 * @param repsId The id of the wanted Reps.
	 * @return The found Reps. If no Reps is found, this method returns null.
	 */
	Reps getById(Integer repsId) throws EntityNotFoundException;

    /**
	 * Finds Reps by unique key.
	 *
	 * @param Map of one of Unique key column fields vs values.
	 * @return The found Reps. If no Reps is found, this method returns null.
	 */
	Reps getByUniqueKey(Map<String, Object> uniqueyKeyFieldsVsValues) throws EntityNotFoundException;

	/**
	 * Updates the information of a Reps.
	 *
	 * @param reps The information of the updated Reps.
	 * @return The updated Reps.
     *
	 * @throws EntityNotFoundException if no Reps is found with given id.
	 */
	Reps update(Reps reps) throws EntityNotFoundException;

    /**
	 * Deletes a Reps.
	 *
	 * @param repsId The id of the deleted Reps.
	 * @return The deleted Reps.
     *
	 * @throws EntityNotFoundException if no Reps is found with the given id.
	 */
	Reps delete(Integer repsId) throws EntityNotFoundException;

	/**
	 * Finds all Reps.
	 *
	 * @return A list of Reps.
	 */
    @Deprecated
	Page<Reps> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all Reps.
	 * @return A list of Reps.
	 */
    Page<Reps> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the Reps in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the Reps.
	 */
	long count(String query);

    Page<Tasks> findAssociatedTaskses(Integer id, Pageable pageable);

    Page<Quotes> findAssociatedQuoteses(Integer id, Pageable pageable);

    Page<Reps> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

