/*Copyright (c) 2015-2016 wavemaker-com All Rights Reserved.This software is the confidential and proprietary information of wavemaker-com You shall not disclose such Confidential Information and shall use it only in accordance with the terms of the source code license agreement you entered into with wavemaker-com*/

package com.salesdb.service;

/*This is a Studio Managed File. DO NOT EDIT THIS FILE. Your changes may be reverted by Studio.*/

import java.util.Map;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.Pageable;

import com.wavemaker.runtime.data.exception.EntityNotFoundException;
import com.wavemaker.runtime.data.export.ExportType;
import com.wavemaker.runtime.data.expression.QueryFilter;
import com.wavemaker.runtime.file.model.Downloadable;

import com.salesdb.FollowUps;

/**
 * Service object for domain model class FollowUps.
 *
 * @see {@link FollowUps}
 */
public interface FollowUpsService {

    /**
     * Creates a new FollowUps.
     *
     * @param followUps The information of the created CompositeTable.
     * @return The created FollowUps.
     */
	FollowUps create(FollowUps followUps);


	/**
	 * Finds FollowUps by id.
	 *
	 * @param followUpsId The id of the wanted FollowUps.
	 * @return The found FollowUps. If no FollowUps is found, this method returns null.
	 */
	FollowUps getById(Integer followUpsId) throws EntityNotFoundException;

    /**
	 * Finds FollowUps by unique key.
	 *
	 * @param Map of one of Unique key column fields vs values.
	 * @return The found FollowUps. If no FollowUps is found, this method returns null.
	 */
	FollowUps getByUniqueKey(Map<String, Object> uniqueyKeyFieldsVsValues) throws EntityNotFoundException;

	/**
	 * Updates the information of a FollowUps.
	 *
	 * @param followUps The information of the updated FollowUps.
	 * @return The updated FollowUps.
     *
	 * @throws EntityNotFoundException if no FollowUps is found with given id.
	 */
	FollowUps update(FollowUps followUps) throws EntityNotFoundException;

    /**
	 * Deletes a FollowUps.
	 *
	 * @param followUpsId The id of the deleted FollowUps.
	 * @return The deleted FollowUps.
     *
	 * @throws EntityNotFoundException if no FollowUps is found with the given id.
	 */
	FollowUps delete(Integer followUpsId) throws EntityNotFoundException;

	/**
	 * Finds all FollowUps.
	 *
	 * @return A list of FollowUps.
	 */
    @Deprecated
	Page<FollowUps> findAll(QueryFilter[] queryFilters, Pageable pageable);

    /**
	 * Finds all FollowUps.
	 * @return A list of FollowUps.
	 */
    Page<FollowUps> findAll(String query, Pageable pageable);

    Downloadable export(ExportType exportType, String query, Pageable pageable);

	/**
	 * Retrieve the count of the FollowUps in the repository with matching query.
     *
     * @param query query to filter results.
	 * @return The count of the FollowUps.
	 */
	long count(String query);


    Page<FollowUps> findAssociatedValues(Object value, String entityName, String key,  Pageable pageable);

}

